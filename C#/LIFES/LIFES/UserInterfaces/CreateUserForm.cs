using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using LIFES.Authentication;
using System.Text.RegularExpressions;
using System.Collections;

namespace LIFES.UserInterfaces
{
    /*
     * Class Name: CreateUserForm.cs
     * 
     * Author: Riley Smith
     * Date: 4/1/2015
     * Modified by: Jordan Beck
     * 
     * Description: This is the driver class for the Create User Window.
     * 
     *   Initially generated by Visual Studio GUI builder.
     */
    public partial class CreateUserForm : Form
    {

        //Constants Used for transition animations
        const int AW_SLIDE = 0X40000;
        const int AW_CENTER = 0x00000010;
        const int AW_HOR_POSITIVE = 0X1;
        const int AW_HOR_NEGATIVE = 0X2;
        const int AW_VER_POSITIVE = 0x00000004;
        const int AW_BLEND = 0X80000;

        [DllImport("user32")]
        static extern bool AnimateWindow(IntPtr hwnd, int time, int flags);

        private UserList users;
        private ArrayList usersList;
        private int numAdmins;
        private const int ADMINAMOUNT = 2;

        public CreateUserForm()
        {
            InitializeComponent();
            users = new UserList();
            usersList = users.GetUserNames();
            numAdmins = 0;

            foreach (string ele in usersList)
            {
                string userName = ele;
                if (users.IsAdmin(userName))
                {
                    numAdmins = numAdmins + 1;
                }
            }
        }

        /*
         * Method: OnLoad
         * Parameters: EventArgs e
         * Output: N/A
         * Created By: Riley Smith
         * Date: 3/30/2015
         * Modified By: Jordan Beck
         * 
         * Override the function that loads the Form.
         * Animates the window as it opens.
         */
        protected override void OnLoad(EventArgs e)
        {
            AnimateWindow(this.Handle, 200, AW_SLIDE | AW_VER_POSITIVE);
        }

        /*
         * Method: CreateUserBttn_Click
         * Paraneters: object sender, EventArgs e
         * Output: The username and password to the file
         * Created By: Riley Smith
         * Date: 3/30/2015
         * Modified By: Scott Smoke
         * 
         * Description: This will create a user account if the username is
         * a UNA email account and the password matches the requirements in the Spec doc
         * else it displays a message denoting what needs to be corrected.
         * 
         */
        private void CreateUserBttn_Click(object sender, EventArgs e)
        {
            Regex emailEx = new Regex("^[a-zA-Z0-9]{1,32}@una.edu$");
            Regex pwdEx = new Regex("^[a-z]{1}([a-z0-9\\*#\\$]){6,8}$");
            if (emailEx.IsMatch(userNameTextBox.Text))
            {
                if (userNameTextBox.Text != "" && passwordTextBox.Text != "" &&
                    confirmTextBox.Text != "")
                {
                    if (pwdEx.IsMatch(passwordTextBox.Text.ToLower()))
                    {
                        if (passwordTextBox.Text.Equals(confirmTextBox.Text))
                        {
                            if (adminRadioButton.Checked)
                            {
                                if (numAdmins < ADMINAMOUNT)
                                {
                                    users.AddUser(userNameTextBox.Text,
                                        passwordTextBox.Text, true);
                                    MessageBox.Show(userNameTextBox.Text + " added",
                                    "User Added");
                                    numAdmins = numAdmins + 1;

                                    // Reset text boxes.
                                    userNameTextBox.Clear();
                                    passwordTextBox.Clear();
                                    confirmTextBox.Clear();
                                }
                                else
                                {
                                    MessageBox.Show(userNameTextBox.Text +
                                        " unable to be added, only one admin is allowed.");
                                }

                            }

                            else if (generalRadioButton.Checked)
                            {
                                users.AddUser(userNameTextBox.Text,
                                    passwordTextBox.Text, false);

                                MessageBox.Show(userNameTextBox.Text + " added",
                                    "User Added");

                                // Reset text boxes.
                                userNameTextBox.Clear();
                                passwordTextBox.Clear();
                                confirmTextBox.Clear();
                            }

                        }
                        else
                        {
                            MessageBox.Show("Please ensure the passwords match.");
                        }
                    }
                    else
                    {
                        MessageBox.Show("Passwords must be between 7-9\n" +
                            "characters, start with a letter, all be in the\n" +
                            "same case and must contain any of the following\n" +
                            "numbers/leters/#*$");
                    }

                }
            }
            else
            {
                MessageBox.Show("Must use a UNA email");
            }

        }

        /*
        * Method: ConfirmTextBox_KeyDown
        * Paraneters: object sender, EventArgs e
        * Output: N/A
        * Created By: Riley Smith
        * Date: 4/22/2015
        * Modified By: Riley Smith
        * 
        * Description: If the user pressed the enter key while in the 
        *   confirm password textbox, call the CreateUserBttn_Click function.
        * 
        */
        private void ConfirmTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                CreateUserBttn_Click(sender, e);
            }
        }
    }
}
